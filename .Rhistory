#'
#' This function gets the average ratings for ramen based on countries
#'
#' @return A boxplot contains 5 summary statistics of different ramen.
#'
#' @examples
#'
#'boxplot(Asia)
#'
#'
#' @export
boxplot <- function(continent = NULL) {
`%>%` <- magrittr::`%>%`
continent <- unique(ramen_rating$continent)
average <- ramen_rating %>%
dplyr::group_by(country)
out <- ifelse(is.null(continent),
paste0("There is no corresponding plot"),
print(ggplot2::ggplot(average, aes(x = country, y = stars, fill = country)) +
geom_boxplot(color = "black",
size = 1,
width = 0.3) +
scale_y_continuous(labels = scales::comma)+
theme(
legend.title = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
ylab("Rating") +
coord_flip()))
}
#' Get five summary numbers for ramen in different countries
#'
#' This function gets the average ratings for ramen based on countries
#'
#' @return A boxplot contains 5 summary statistics of different ramen.
#'
#' @examples
#'
#'boxplot(Asia)
#'
#'
#' @export
boxplot <- function(continent = NULL) {
`%>%` <- magrittr::`%>%`
continent <- unique(ramen_rating$continent)
average <- ramen_rating %>%
dplyr::group_by(country)
out <- ifelse(is.null(continent),
paste0("There is no corresponding plot"),
paste0(ggplot2::ggplot(average, aes(x = country, y = stars, fill = country)) +
geom_boxplot(color = "black",
size = 1,
width = 0.3) +
theme(
legend.title = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
ylab("Rating") +
coord_flip()))
}
#' Get five summary numbers for ramen in different countries
#'
#' This function gets the average ratings for ramen based on countries.
#'
#' @return A boxplot contains 5 summary statistics of different ramen.
#'
#'@param continent The continent in which a country is located in.
#' @examples
#'
#'boxplot("Asia")
#'
#'
#' @export
boxplot <- function(continent = NULL) {
`%>%` <- magrittr::`%>%`
continent <- unique(ramen_rating$continent)
average <- ramen_rating %>%
dplyr::group_by(country)
out <- ifelse(is.null(continent),
paste0("There is no corresponding plot"),
paste0(ggplot2::ggplot(average, ggplot2::aes(x = country, y = stars, fill = country)) +
geom_boxplot(color = "black",
size = 1,
width = 0.3) +
theme(
legend.title = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
ylab("Rating") +
coord_flip()))
}
out <- ifelse(is.null(continent),
paste0("There is no corresponding plot"),
ggplot2::ggplot(average, ggplot2::aes(x = country, y = stars, fill = country)) +
geom_boxplot(color = "black",
size = 1,
width = 0.3) +
theme(
legend.title = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
ylab("Rating") +
coord_flip())
#' Get review ratings for different ramen varieties
#'
#' This function gets the ratings for various ramen
#'
#' @return A data.frame including 2805 observations and 7 variables.
#'
#'@param country The origin country of the ramen brand.
#' @examples
#' ramen_ratings()
#'
#' @importFrom graphics stars
#'
#' @export
ramen_ratings <- function(){
`%>%` <- magrittr::`%>%`
url <- 'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-06-04/ramen_ratings.csv'
asia <- c("Russia", "Thailand", "Japan", "Taiwan", "South Korea", "Hong Kong", "Malaysia", "China", "Philippines", "Vietnam", "Bangladesh", "Singapore", "Indonesia", "India", "Pakistan", "Nepal", "Myanmar", "Cambodia", "Dubai")
europe <- c("France", "Ukraine", "Netherlands", "Italy", "Poland", "Germany", "Hungary", "United Kingdom", "Finland", "Sweden", "Estonia")
oceania <- c("Australia", "New Zealand", "Fiji")
africa <- c("Nigeria", "Ghana")
america <- c("Canada", "United States", "Brazil", "Mexico", "Colombia")
readr::read_csv(url) %>%
tidyr::drop_na(stars) %>%
dplyr::mutate(country = ifelse(country == "Hong Kong", "China", country),
country = ifelse(country == "Russia", "Russian Federation", country),
country = ifelse(country == "Holland", "Netherlands", country),
country = ifelse(country == "Dubai", "United Arab Emirates", country),
country = ifelse(country == "South Korea", "Republic of Korea", country),
country = ifelse(country == "Singapore", "Malaysia", country),
country = ifelse(country == "Sarawak", "Malaysia", country),
country = ifelse(country == "USA", "United States", country),
country = ifelse(country == "UK", "United Kingdom", country),
country = ifelse(country == "Phlippines", "Philippines", country)) %>%
dplyr::mutate(continent = dplyr::case_when(
country %in% asia ~ "Asia",
country %in% europe ~ "Europe",
country %in% oceania ~ "Oceania",
country %in% america ~ "America",
country %in% africa ~ "Africa")) %>%
dplyr::filter(continent != "NA")
}
#' Get five summary numbers for ramen in different countries
#'
#' This function gets the average ratings for ramen based on countries.
#'
#' @return A boxplot contains 5 summary statistics of different ramen.
#'
#'@param continent The continent in which a country is located in.
#' @examples
#'
#'boxplot("Asia")
#'
#'
#' @export
boxplot <- function(continent = NULL) {
`%>%` <- magrittr::`%>%`
continent <- unique(ramen_rating$continent)
average <- ramen_rating %>%
dplyr::group_by(country)
out <- ggplot2::ggplot(average, ggplot2::aes(x = country, y = stars, fill = country)) +
geom_boxplot(color = "black",
size = 1,
width = 0.3) +
theme(
legend.title = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
ylab("Rating") +
coord_flip()))
#' Get five summary numbers for ramen in different countries
#'
#' This function gets the average ratings for ramen based on countries.
#'
#' @return A boxplot contains 5 summary statistics of different ramen.
#'
#'@param continent The continent in which a country is located in.
#' @examples
#'
#'boxplot("Asia")
#'
#'
#' @export
boxplot <- function(continent = NULL) {
`%>%` <- magrittr::`%>%`
continent <- unique(ramen_rating$continent)
average <- ramen_rating %>%
dplyr::group_by(country)
out <- ggplot2::ggplot(average, ggplot2::aes(x = country, y = stars, fill = country)) +
geom_boxplot(color = "black",
size = 1,
width = 0.3) +
theme(
legend.title = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
ylab("Rating") +
coord_flip())
#' Get five summary numbers for ramen in different countries
#'
#' This function gets the average ratings for ramen based on countries.
#'
#' @return A boxplot contains 5 summary statistics of different ramen.
#'
#'@param continent The continent in which a country is located in.
#' @examples
#'
#'boxplot("Asia")
#'
#'
#' @export
boxplot <- function(continent = NULL) {
`%>%` <- magrittr::`%>%`
continent <- unique(ramen_rating$continent)
average <- ramen_rating %>%
dplyr::group_by(country)
out <- ggplot2::ggplot(average, ggplot2::aes(x = country, y = stars, fill = country)) +
geom_boxplot(color = "black",
size = 1,
width = 0.3) +
theme(
legend.title = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
ylab("Rating") +
coord_flip()
}
#' Get review ratings for different ramen varieties
#'
#' This function gets the ratings for various ramen
#'
#' @return A data.frame including 2805 observations and 7 variables.
#'
#' @examples
#' ramen_ratings()
#'
#' @importFrom graphics stars
#'
#' @export
ramen_ratings <- function(){
`%>%` <- magrittr::`%>%`
url <- 'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-06-04/ramen_ratings.csv'
asia <- c("Russia", "Thailand", "Japan", "Taiwan", "South Korea", "Hong Kong", "Malaysia", "China", "Philippines", "Vietnam", "Bangladesh", "Singapore", "Indonesia", "India", "Pakistan", "Nepal", "Myanmar", "Cambodia", "Dubai")
europe <- c("France", "Ukraine", "Netherlands", "Italy", "Poland", "Germany", "Hungary", "United Kingdom", "Finland", "Sweden", "Estonia")
oceania <- c("Australia", "New Zealand", "Fiji")
africa <- c("Nigeria", "Ghana")
america <- c("Canada", "United States", "Brazil", "Mexico", "Colombia")
readr::read_csv(url) %>%
tidyr::drop_na(stars) %>%
dplyr::mutate(country = ifelse(country == "Hong Kong", "China", country),
country = ifelse(country == "Russia", "Russian Federation", country),
country = ifelse(country == "Holland", "Netherlands", country),
country = ifelse(country == "Dubai", "United Arab Emirates", country),
country = ifelse(country == "South Korea", "Republic of Korea", country),
country = ifelse(country == "Singapore", "Malaysia", country),
country = ifelse(country == "Sarawak", "Malaysia", country),
country = ifelse(country == "USA", "United States", country),
country = ifelse(country == "UK", "United Kingdom", country),
country = ifelse(country == "Phlippines", "Philippines", country)) %>%
dplyr::mutate(continent = dplyr::case_when(
country %in% asia ~ "Asia",
country %in% europe ~ "Europe",
country %in% oceania ~ "Oceania",
country %in% america ~ "America",
country %in% africa ~ "Africa")) %>%
dplyr::filter(continent != "NA")
}
#' Get five summary numbers for ramen in different countries
#'
#' This function gets the average ratings for ramen based on countries.
#'
#' @return A boxplot contains 5 summary statistics of different ramen.
#'
#'@param continent The continent in which a country is located in.
#' @examples
#'
#'boxplot("Asia")
#'
#'
#' @export
boxplot <- function(continent = NULL) {
`%>%` <- magrittr::`%>%`
continent <- unique(ramen_rating$continent)
average <- ramen_rating %>%
dplyr::group_by(country)
out <- ggplot2::ggplot(average, ggplot2::aes(x = country, y = stars, fill = country)) +
ggplot2::geom_boxplot(color = "black",
size = 1,
width = 0.3) +
ggplot2::theme(
legend.title = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
ggplot2::ylab("Rating") +
ggplot2::coord_flip()
}
#' Get five summary numbers for ramen in different countries
#'
#' This function gets the average ratings for ramen based on countries.
#'
#' @return A boxplot contains 5 summary statistics of different ramen.
#'
#'@param continent The continent in which a country is located in.
#' @examples
#'
#'boxplot("Asia")
#'
#'
#' @export
boxplot <- function(continent = NULL) {
`%>%` <- magrittr::`%>%`
continent <- unique(ramen_rating$continent)
average <- ramen_rating %>%
dplyr::group_by(country)
out <- ggplot2::ggplot(average, ggplot2::aes(x = country, y = stars, fill = country)) +
ggplot2::geom_boxplot(color = "black",
size = 1,
width = 0.3) +
ggplot2::theme(
legend.title = ggplot2::element_blank(),
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank()) +
ggplot2::ylab("Rating") +
ggplot2::coord_flip()
}
devtools::install()
library(ramenreview)
?ramenreview
good_bad_ramen <- function(countries = unique(ramen_rating$country)) {
`%>%` <- magrittr::`%>%`
worst <- ramen_rating %>%
dplyr::mutate(Type = dplyr::case_when(
stars < 3 ~ "Bad",
stars >= 3 ~ "Good")) %>%
dplyr::group_by(country, Type) %>%
dplyr::count(country, Type) %>%
dplyr::group_by(country) %>%
dplyr::mutate(total = sum(n)) %>%
dplyr::mutate(percentage = n/total * 100) %>%
dplyr::mutate_if(is.numeric, round, digits = 2) %>%
dplyr::select(country, Type, percentage)
slices <- worst$percentage
lbls <- worst$Type
pct <- round(slices)
lbls <- paste(lbls, pct)
lbls <- paste(lbls,"%",sep="")
out <- pie(slices,labels = lbls, col= c("#eec6a7", "#9f1618"),
main="Percentage of good and bad ramen")
plot <- print(out)
good_bad_ramen <- function(countries = unique(ramen_rating$country)) {
`%>%` <- magrittr::`%>%`
worst <- ramen_rating %>%
dplyr::mutate(Type = dplyr::case_when(
stars < 3 ~ "Bad",
stars >= 3 ~ "Good")) %>%
dplyr::group_by(country, Type) %>%
dplyr::count(country, Type) %>%
dplyr::group_by(country) %>%
dplyr::mutate(total = sum(n)) %>%
dplyr::mutate(percentage = n/total * 100) %>%
dplyr::mutate_if(is.numeric, round, digits = 2) %>%
dplyr::select(country, Type, percentage)
slices <- worst$percentage
lbls <- worst$Type
pct <- round(slices)
lbls <- paste(lbls, pct)
lbls <- paste(lbls,"%",sep="")
out <- pie(slices,labels = lbls, col= c("#eec6a7", "#9f1618"),
main="Percentage of good and bad ramen")
plot <- print(out)
}
good_bad_ramen <- function(countries = unique(ramen_rating$country)) {
`%>%` <- magrittr::`%>%`
worst <- ramen_rating %>%
dplyr::mutate(Type = dplyr::case_when(
stars < 3 ~ "Bad",
stars >= 3 ~ "Good")) %>%
dplyr::group_by(country, Type) %>%
dplyr::count(country, Type) %>%
dplyr::group_by(country) %>%
dplyr::mutate(total = sum(n)) %>%
dplyr::mutate(percentage = n/total * 100) %>%
dplyr::mutate_if(is.numeric, round, digits = 2) %>%
dplyr::select(country, Type, percentage)
slices <- worst$percentage
lbls <- worst$Type
pct <- round(slices)
lbls <- paste(lbls, pct)
lbls <- paste(lbls,"%",sep="")
out <- pie(slices,labels = lbls, col= c("#eec6a7", "#9f1618"),
main="Percentage of good and bad ramen")
plot <- print(out)
}
good_bad_ramen <- function(countries = unique(ramen_rating$country)) {
`%>%` <- magrittr::`%>%`
worst <- ramen_rating %>%
dplyr::mutate(Type = dplyr::case_when(
stars < 3 ~ "Bad",
stars >= 3 ~ "Good")) %>%
dplyr::group_by(country, Type) %>%
dplyr::count(country, Type) %>%
dplyr::group_by(country) %>%
dplyr::mutate(total = sum(n)) %>%
dplyr::mutate(percentage = n/total * 100) %>%
dplyr::mutate_if(is.numeric, round, digits = 2) %>%
dplyr::select(country, Type, percentage)
slices <- worst$percentage
lbls <- worst$Type
pct <- round(slices)
lbls <- paste(lbls, pct)
lbls <- paste(lbls,"%",sep="")
out <- pie(slices,labels = lbls, col= c("#eec6a7", "#9f1618"),
main="Percentage of good and bad ramen")
plot <- print(out)
}
good_bad_ramen <- function(countries = unique(ramen_rating$country)) {
`%>%` <- magrittr::`%>%`
worst <- ramen_rating %>%
dplyr::mutate(Type = dplyr::case_when(
stars < 3 ~ "Bad",
stars >= 3 ~ "Good")) %>%
dplyr::group_by(country, Type) %>%
dplyr::count(country, Type) %>%
dplyr::group_by(country) %>%
dplyr::mutate(total = sum(n)) %>%
dplyr::mutate(percentage = n/total * 100) %>%
dplyr::mutate_if(is.numeric, round, digits = 2) %>%
dplyr::select(country, Type, percentage)
slices <- worst$percentage
lbls <- worst$Type
pct <- round(slices)
lbls <- paste(lbls, pct)
lbls <- paste(lbls,"%",sep="")
out <- pie(slices,labels = lbls, col= c("#eec6a7", "#9f1618"),
main="Percentage of good and bad ramen")
plot <- print(out)
}
good_bad_ramen <- function(countries = unique(ramen_rating$country)) {
`%>%` <- magrittr::`%>%`
worst <- ramen_rating %>%
dplyr::mutate(Type = dplyr::case_when(
stars < 3 ~ "Bad",
stars >= 3 ~ "Good")) %>%
dplyr::group_by(country, Type) %>%
dplyr::count(country, Type) %>%
dplyr::group_by(country) %>%
dplyr::mutate(total = sum(n)) %>%
dplyr::mutate(percentage = n/total * 100) %>%
dplyr::mutate_if(is.numeric, round, digits = 2) %>%
dplyr::select(country, Type, percentage)
slices <- worst$percentage
lbls <- worst$Type
pct <- round(slices)
lbls <- paste(lbls, pct)
lbls <- paste(lbls,"%",sep="")
out <- pie(slices,labels = lbls, col= c("#eec6a7", "#9f1618"),
main="Percentage of good and bad ramen")
plot <- print(out)
}
#' Get five summary numbers for ramen in different countries
#'
#' This function gets the average ratings for ramen based on countries.
#'
#' @return A boxplot contains 5 summary statistics of different ramen.
#'
#'@param countries The country in which a ramen bran comes from.
#'
#' @examples
#' good_bad_ramen("Australia")
#'
#'
#' @export
good_bad_ramen <- function(countries = unique(ramen_rating$country)) {
`%>%` <- magrittr::`%>%`
worst <- ramen_rating %>%
dplyr::mutate(Type = dplyr::case_when(
stars < 3 ~ "Bad",
stars >= 3 ~ "Good")) %>%
dplyr::group_by(country, Type) %>%
dplyr::count(country, Type) %>%
dplyr::group_by(country) %>%
dplyr::mutate(total = sum(n)) %>%
dplyr::mutate(percentage = n/total * 100) %>%
dplyr::mutate_if(is.numeric, round, digits = 2) %>%
dplyr::select(country, Type, percentage)
slices <- worst$percentage
lbls <- worst$Type
pct <- round(slices)
lbls <- paste(lbls, pct)
lbls <- paste(lbls,"%",sep="")
out <- pie(slices,labels = lbls, col= c("#eec6a7", "#9f1618"),
main="Percentage of good and bad ramen")
plot <- print(out)
}
devtools::install()
library(usethis)
library(roxygen2)
library(devtools)
devtools::install()
library(ramenreview)
ramenreview::ramen_ratings()
ramenreview::run_app()
ramenreview::good_bad_ramen("Australia")
devtools::install("ramenreview")
devtools::install()
library(ramenreview)
ramenreview::good_bad_ramen("Australia")
devtools::install()
devtools::install()
devtools::install()
